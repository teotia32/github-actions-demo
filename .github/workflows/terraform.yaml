name: 'Terraform'

on:
  push:
    branches:
    - "main"
  workflow_dispatch:
    inputs:
        # Terraform action you want to perform
      action:
        description: 'Terraform Action to Perform'
        type: choice
        required: true
        options:
          - Terraform_apply
          - Terraform_destroy


permissions:
  contents: read

jobs:
 Terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.SECRET_KEY }}
        aws-region: us-east-1
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
     # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

# Terraform_destroy:
#      name: 'Terraform Destroy'
#      runs-on: ubuntu-latest
#      environment: production
#
#      # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#      defaults:
#        run:
#          shell: bash
#
#      steps:
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
#          aws-region: us-east-1
#      # Checkout the repository to the GitHub Actions runner
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
#
#      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#      - name: Terraform Init
#        run: terraform init
#
#
#        # On push to "main", build or change infrastructure according to Terraform configuration files
#        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#      - name: Terraform destroy
#       # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#        run: terraform destroy -auto-approve -input=false